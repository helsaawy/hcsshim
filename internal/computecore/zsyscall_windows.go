//go:build windows

// Code generated by 'go generate' using "github.com/Microsoft/go-winio/tools/mkwinsyscall"; DO NOT EDIT.

package computecore

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	return e
}

var (
	modcomputecore = windows.NewLazySystemDLL("computecore.dll")

	procHcsCancelOperation          = modcomputecore.NewProc("HcsCancelOperation")
	procHcsCloseOperation           = modcomputecore.NewProc("HcsCloseOperation")
	procHcsCreateOperation          = modcomputecore.NewProc("HcsCreateOperation")
	procHcsEnumerateComputeSystems  = modcomputecore.NewProc("HcsEnumerateComputeSystems")
	procHcsGetOperationId           = modcomputecore.NewProc("HcsGetOperationId")
	procHcsGetOperationResult       = modcomputecore.NewProc("HcsGetOperationResult")
	procHcsGetOperationType         = modcomputecore.NewProc("HcsGetOperationType")
	procHcsSetComputeSystemCallback = modcomputecore.NewProc("HcsSetComputeSystemCallback")
	procHcsSetOperationCallback     = modcomputecore.NewProc("HcsSetOperationCallback")
	procHcsSetProcessCallback       = modcomputecore.NewProc("HcsSetProcessCallback")
	procHcsWaitForOperationResult   = modcomputecore.NewProc("HcsWaitForOperationResult")
)

func hcsCancelOperation(operation HCSOperation) (hr error) {
	hr = procHcsCancelOperation.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.SyscallN(procHcsCancelOperation.Addr(), uintptr(operation))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func hcsCloseOperation(operation HCSOperation) (err error) {
	err = procHcsCloseOperation.Find()
	if err != nil {
		return
	}
	syscall.SyscallN(procHcsCloseOperation.Addr(), uintptr(operation))
	return
}

func hcsCreateOperation(context HCSContext, callback hcsOperationCompletionUintptr) (op HCSOperation, err error) {
	err = procHcsCreateOperation.Find()
	if err != nil {
		return
	}
	r0, _, e1 := syscall.SyscallN(procHcsCreateOperation.Addr(), uintptr(context), uintptr(callback))
	op = HCSOperation(r0)
	if op == 0 {
		err = errnoErr(e1)
	}
	return
}

func hcsEnumerateComputeSystems(query string, operation HCSOperation) (hr error) {
	var _p0 *uint16
	_p0, hr = syscall.UTF16PtrFromString(query)
	if hr != nil {
		return
	}
	return _hcsEnumerateComputeSystems(_p0, operation)
}

func _hcsEnumerateComputeSystems(query *uint16, operation HCSOperation) (hr error) {
	hr = procHcsEnumerateComputeSystems.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.SyscallN(procHcsEnumerateComputeSystems.Addr(), uintptr(unsafe.Pointer(query)), uintptr(operation))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func hcsGetOperationID(operation HCSOperation) (id uint64, err error) {
	err = procHcsGetOperationId.Find()
	if err != nil {
		return
	}
	r0, _, e1 := syscall.SyscallN(procHcsGetOperationId.Addr(), uintptr(operation))
	id = uint64(r0)
	if id == 0 {
		err = errnoErr(e1)
	}
	return
}

func hcsGetOperationResult(operation HCSOperation, resultDocument **uint16) (hr error) {
	hr = procHcsGetOperationResult.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.SyscallN(procHcsGetOperationResult.Addr(), uintptr(operation), uintptr(unsafe.Pointer(resultDocument)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func hcsGetOperationType(operation HCSOperation) (t HCSOperationType, err error) {
	err = procHcsGetOperationType.Find()
	if err != nil {
		return
	}
	r0, _, e1 := syscall.SyscallN(procHcsGetOperationType.Addr(), uintptr(operation))
	t = HCSOperationType(r0)
	if t == 0 {
		err = errnoErr(e1)
	}
	return
}

func hcsSetComputeSystemCallback(computeSystem HCSSystem, callbackOptions HCSEventOptions, context HCSContext, callback hcsEventCallbackUintptr) (hr error) {
	hr = procHcsSetComputeSystemCallback.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.SyscallN(procHcsSetComputeSystemCallback.Addr(), uintptr(computeSystem), uintptr(callbackOptions), uintptr(context), uintptr(callback))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func hcsSetOperationCallback(operation HCSOperation, context HCSContext, callback hcsOperationCompletionUintptr) (hr error) {
	hr = procHcsSetOperationCallback.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.SyscallN(procHcsSetOperationCallback.Addr(), uintptr(operation), uintptr(context), uintptr(callback))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func hcsSetProcessCallback(process HCSProcess, callbackOptions HCSEventOptions, context HCSContext, callback hcsEventCallbackUintptr) (hr error) {
	hr = procHcsSetProcessCallback.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.SyscallN(procHcsSetProcessCallback.Addr(), uintptr(process), uintptr(callbackOptions), uintptr(context), uintptr(callback))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

func hcsWaitForOperationResult(operation HCSOperation, timeoutMs uint32, resultDocument **uint16) (hr error) {
	hr = procHcsWaitForOperationResult.Find()
	if hr != nil {
		return
	}
	r0, _, _ := syscall.SyscallN(procHcsWaitForOperationResult.Addr(), uintptr(operation), uintptr(timeoutMs), uintptr(unsafe.Pointer(resultDocument)))
	if int32(r0) < 0 {
		if r0&0x1fff0000 == 0x00070000 {
			r0 &= 0xffff
		}
		hr = syscall.Errno(r0)
	}
	return
}

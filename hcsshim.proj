<?xml version="1.0" encoding="utf-8"?>
<Project
    ToolsVersion="15"
    DefaultTargets=""
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- InitialTargets="MakeDirs" -->

    <PropertyGroup>
        <ImportDirectoryBuildTargets>false</ImportDirectoryBuildTargets>

        <!-- <BaseDir>.</BaseDir> -->
        <BaseDir>$(MSBuildProjectDirectory)</BaseDir>
        <BinDir>$([System.IO.Path]::Combine($(BaseDir), bin))</BinDir>
        <CmdBin>$([System.IO.Path]::Combine($(BinDir), cmd))</CmdBin>
        <TestBin>$([System.IO.Path]::Combine($(BinDir), test))</TestBin>
        <ToolBin>$([System.IO.Path]::Combine($(BinDir), tool))</ToolBin>

        <DepDir>$([System.IO.Path]::Combine($(BaseDir), deps))</DepDir>
        <OutDir>$([System.IO.Path]::Combine($(BaseDir), out))</OutDir>
        <ProtobufDir>$([System.IO.Path]::Combine($(BaseDir), protobuf))</ProtobufDir>
        <TestDir>$([System.IO.Path]::Combine($(BaseDir), test))</TestDir>

        <PwshFlags>-NoProfile -NoLogo -NonInteractive</PwshFlags>
        <!-- # bug on Win11 latest where TLS1.3 is forced, but still unsupported -->
        <CurlFlags>-L --no-progress-meter --write-out "code: %25{http_code}\ncontent: %25{content_type}\nbytes: %25{size_download}\nurl: %25{url_effective}\n" --tls-max "1.2"</CurlFlags>
        <GoLintFlags>--timeout=2m --max-issues-per-linter=0 --max-same-issues=0 --modules-download-mode=readonly --verbose --config="$([System.IO.Path]::Combine($(BaseDir), .golangci.yml))"</GoLintFlags>

        <!-- <CGO_ENABLED Condition="'$(CGO_ENABLED)' == ''">0</CGO_ENABLED> -->
        <CGO_ENABLED>0</CGO_ENABLED>
        <GOOS>windows</GOOS>
        <GOWORK>off</GOWORK>

        <GoBuildFlags>-ldflags="-s -w"</GoBuildFlags>
        <GoBuildTestFlags>-gcflags="all=-d=checkptr"</GoBuildTestFlags>
        <GoGenFlags>-x</GoGenFlags>
        <GoModFlags>-e</GoModFlags>
        <GoTestFlags>-v -timeout=30m -race</GoTestFlags>
    </PropertyGroup>

    <ItemDefinitionGroup>
        <GoBinary>
            <Build>true</Build>
            <CGO_ENABLED>$(CGO_ENABLED)</CGO_ENABLED>
            <GOOS>$(GOOS)</GOOS>
            <GOWORK>$(GOWORK)</GOWORK>
        </GoBinary>
    </ItemDefinitionGroup>

    <ItemGroup>
        <ProtoFile Include="**\*.proto" Exclude="vendor\**" />

        <GoBinary Include="$(CmdBin)\containerd-shim-runhcs-v1.exe" Name="shim" Src="cmd\containerd-shim-runhcs-v1" />
        <GoBinary Include="$(CmdBin)\device-util.exe" Src="cmd\device-util" />
        <GoBinary Include="$(CmdBin)\gcs" Src="cmd\gcs" GOOS="linux" />
        <GoBinary Include="$(CmdBin)\gcstools" Src="cmd\gcstools" GOOS="linux" />
        <GoBinary Include="$(CmdBin)\wait-paths" Src="cmd\hooks\wait-paths" GOOS="linux" />
        <GoBinary Include="$(CmdBin)\ncproxy.exe" Src="cmd\ncproxy" />
        <GoBinary Include="$(CmdBin)\runhcs.exe" Src="cmd\runhcs" />
        <GoBinary Include="$(CmdBin)\shimdiag.exe" Src="cmd\shimdiag" />
        <GoBinary Include="$(CmdBin)\tar2ext4.exe" Src="cmd\tar2ext4" />
        <GoBinary Include="$(CmdBin)\tar2ext4" Src="cmd\tar2ext4" GOOS="linux" />
        <GoBinary Include="$(CmdBin)\wclayer.exe" Src="cmd\wclayer" />
        <GoBinary Include="$(CmdBin)\vaccess.exe" Src="internal\tools\grantvmgroupaccess" />
        <GoBinary Include="$(CmdBin)\uvmboot.exe" Src="internal\tools\uvmboot" />
        <GoBinary Include="$(CmdBin)\zapdir.exe" Src="internal\tools\zapdir" />

        <GoBinary Update="@(GoBinary)">
            <Src>$([System.IO.Path]::Combine($(BaseDir),%(Src)))</Src>
            <Name Condition="'%(Name)' == ''">%(FileName)</Name>
        </GoBinary>
    </ItemGroup>
    <!-- <Exec ToolPath="$(TestBin)" ToolExe="functional.test.exe" Command="run" /> -->

    <Target Name="temp">
        <GoCommand
            WorkingDirectory="C:\code\ContainerPlatform\packaging\deploy"
            Command="env" />
    </Target>

    <Target Name="Lint" DependsOnTargets="InstallLint">
        <ItemGroup>
            <Lint Include="repo" GOOS="windows" Dir="$(BaseDir)" />
            <Lint Include="tests" GOOS="windows" Dir="$(TestDir)" />
            <Lint Include="repo-linux" GOOS="linux" Dir="$(BaseDir)"
                Args="cmd\gcs\... cmd\gcstools\... internal\guest\... internal\tools\... ext4\... pkg\..." />
            <Lint Include="tests-linux" GOOS="linux" Dir="$(TestDir)" />
        </ItemGroup>
        <Exec
            Command="golangci-lint.exe run $(GoLintFlags) %(Lint.Args)"
            EnvironmentVariables="GOOS=%(Lint.GOOS);GOWORK=off"
            WorkingDirectory="%(Lint.Dir)" />
    </Target>

    <Target Name="InstallLint" />

    <Target Name="Mod">
        <GoCommand Command="mod tidy" Flags="$(GoModFlags) -v" WorkingDirectory="$(TestDir)" />
        <GoCommand Command="mod tidy" Flags="$(GoModFlags) -v" WorkingDirectory="$(BaseDir)" />
        <GoCommand Command="mod vendor" Flags="$(GoModFlags)" WorkingDirectory="$(BaseDir)" />
    </Target>

    <Target Name="shim">
        <ItemGroup>
            <GoBinary Condition="'%(GoBinary.Name)' != 'shim'" Build="False" />
        </ItemGroup>
    </Target>

    <Target Name="uvmboot">
        <ItemGroup>
            <GoBinary Condition="'%(GoBinary.Name)' != 'uvmboot'" Build="False" />
        </ItemGroup>
    </Target>

    <Target Name="build-linux">
        <ItemGroup>
            <GoBinary Condition="'%(GoBinary.GOOS)' != 'linux'" Build="False" />
        </ItemGroup>
    </Target>

    <Target Name="list-builds">
        <Message
            Importance="High"
            Text="name: %(GoBinary.Name)
    destination: %(GoBinary.Identity)
    source: %(GoBinary.Src)
    GOOS: %(GoBinary.GOOS)
    Build: %(GoBinary.Build)" />
    </Target>

    <Target Name="Build" Outputs="@(GoBinary)" AfterTargets="shim;uvmboot;build-linux">
        <ItemGroup>
            <Binary Include="@(GoBinary)" Condition="'%(GoBinary.Build)' == 'True'" />
        </ItemGroup>
        <GoCommand
            Command="build"
            Flags="$(GoBuildFlags) -o=&quot;%(Binary.Identity)&quot; &quot;%(Binary.Src)&quot;"
            CGO_ENABLED="%(Binary.CGO_ENABLED)"
            GOOS="%(Binary.GOOS)"
            GOWORK="%(Binary.GOWORK)"
            WorkingDirectory="$(BaseDir)"
        />
    </Target>

    <Target Name="MakeDirs">
        <MakeDir Directories="$(CmdBin);$(TestBin);$(ToolBin);$(DepDir);$(OutDir);$(ProtobufDir)" />
    </Target>

    <Target Name="Clean">
        <RemoveDir Directories="$(BinDir);$(DepDir);$(DepDir);$(OutDir);$(ProtobufDir)" />
    </Target>

    <Target Name="ProtoFiles">
        <Message Text="%(ProtoFile.FullPath)" />
    </Target>

    <UsingTask
        TaskName="GoCommand"
        TaskFactory="RoslynCodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <Task>
            <Code Type="Class" Language="cs">
                <![CDATA[
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Build.Utilities;
using Microsoft.Build.Framework;

public class GoCommand : ToolTask {
    [Required]
    public string Command { get; set; }
    public string Flags { get; set; }
    public string WorkingDirectory { get; set; }

    public string GOOS { get; set; }
    public string GOWORK { get; set; }
    public string CGO_ENABLED { get; set; }

    protected override string ToolName => "go.exe";
    protected override MessageImportance StandardOutputLoggingImportance => MessageImportance.High;
    protected override MessageImportance StandardErrorLoggingImportance => MessageImportance.High;

    protected override string GetWorkingDirectory() => WorkingDirectory;

    protected override string GenerateFullPathToTool() => ToolName;

    protected override string GenerateCommandLineCommands() {
        string args = Command;
        if (!string.IsNullOrEmpty(Flags)) {
            args += " " + Flags;
        }
        return args;
    }


    public override bool Execute() {
        List<string> envs;
        if (EnvironmentVariables == null) {
           envs = new List<string>();
        } else {
           envs = new List<string>(EnvironmentVariables.ToList());
        }
        if (!string.IsNullOrEmpty(GOOS)) {
            envs.Add("GOOS=" + GOOS.ToLower());
        }
        if (!string.IsNullOrEmpty(GOWORK)) {
            envs.Add( "GOWORK=" + GOWORK.ToLower());
        }
        if (!string.IsNullOrEmpty(CGO_ENABLED)) {
            envs.Add( "CGO_ENABLED=" + CGO_ENABLED);
        }
        base.EnvironmentVariables = envs.ToArray();
        return base.Execute();
    }
}
]]>
            </Code>
        </Task>
    </UsingTask>

</Project>

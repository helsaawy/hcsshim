<?xml version="1.0" encoding="utf-8"?>
<Project
    ToolsVersion="15.8"
    DefaultTargets="Shim"
    InitialTargets="MakeDirs"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <ImportDirectoryBuildTargets>false</ImportDirectoryBuildTargets>

        <CGO_ENABLED Condition="'$(CGO_ENABLED)' == ''">0</CGO_ENABLED>
        <GOOS Condition="'$(GOOS)' == ''">windows</GOOS>
        <GOWORK>off</GOWORK>

        <!-- <BaseDir>$(MSBuildProjectDirectory)</BaseDir> -->
        <!-- <TestDir>$(BaseDir)\test</TestDir> -->
        <!-- <BinDir>$(BaseDir)\bin</BinDir> -->
        <!-- <BinDir>bin</BinDir> -->
        <BinDir>sssbin</BinDir>
        <CmdBin>$(BinDir)\cmd</CmdBin>
        <TestBin>$(BinDir)\test</TestBin>
        <ToolBin>$(BinDir)\tool</ToolBin>

        <DepDir>deps</DepDir>
        <OutDir>out</OutDir>
        <ProtobufDir>protobuf</ProtobufDir>
        <TestDir>test</TestDir>

        <PwshFlags>-NoProfile -NoLogo -NonInteractive</PwshFlags>
        <!-- # bug on Win11 latest where TLS1.3 is forced, but still unsupported -->
        <CurlFlags>-L --no-progress-meter --write-out "code: %25{http_code}\ncontent: %25{content_type}\nbytes: %25{size_download}\nurl: %25{url_effective}\n" --tls-max "1.2"</CurlFlags>

        <GoBuildFlags>-ldflags="-s -w"</GoBuildFlags>
        <GoBuildTestFlags />
        <GoTestFlags>-v -timeout=30m -race</GoTestFlags>
        <GoGenFlags>-x</GoGenFlags>
        <GoModFlags>-e</GoModFlags>

        <GoLintFlags>--timeout=2m --max-issues-per-linter=0 --max-same-issues=0 --modules-download-mode=readonly --verbose --config="$(BaseDir)\.golangci.yml"</GoLintFlags>
    </PropertyGroup>

    <ItemDefinitionGroup>
        <GoBinary>
            <Build>false</Build>
            <CGO_ENABLED>$(CGO_ENABLED)</CGO_ENABLED>
            <GOOS>$(GOOS)</GOOS>
            <GOWORK>$(GOWORK)</GOWORK>
        </GoBinary>
    </ItemDefinitionGroup>

    <ItemGroup>
        <ProtoFile Include="**\*.proto" Exclude="vendor\**" />

        <GoBinary Include="$(CmdBin)\containerd-shim-runhcs-v1.exe" Name="shim" Src="cmd\containerd-shim-runhcs-v1" />
        <GoBinary Include="$(CmdBin)\device-util.exe" Src="cmd\device-util" />
        <GoBinary Include="$(CmdBin)\gcs" Src="cmd\gcs" GOOS="linux" />
        <GoBinary Include="$(CmdBin)\gcstools" Src="cmd\gcstools" GOOS="linux" />
        <GoBinary Include="$(CmdBin)\wait-paths" Src="cmd\hooks\wait-paths" GOOS="linux" />
        <GoBinary Include="$(CmdBin)\ncproxy.exe" Src="cmd\ncproxy" />
        <GoBinary Include="$(CmdBin)\runhcs.exe" Src="cmd\runhcs" />
        <GoBinary Include="$(CmdBin)\shimdiag.exe" Src="cmd\shimdiag" />
        <GoBinary Include="$(CmdBin)\tar2ext4.exe" Name="tar2ext4-win" Src="cmd\tar2ext4" />
        <GoBinary Include="$(CmdBin)\tar2ext4" Name="tar2ext4-linux" Src="cmd\tar2ext4" GOOS="linux" />
        <GoBinary Include="$(CmdBin)\wclayer.exe" Src="cmd\wclayer" />
        <GoBinary Include="$(CmdBin)\vaccess.exe" Name="vmaccess" Src="internal\tools\grantvmgroupaccess" />
        <GoBinary Include="$(CmdBin)\uvmboot.exe" Name="uvmboot" Src="internal\tools\uvmboot" />
        <GoBinary Include="$(CmdBin)\zapdir.exe" Name="zapdir" Src="internal\tools\zapdir" />
    </ItemGroup>
    <!-- <Exec ToolPath="$(TestBin)" ToolExe="functional.test.exe" Command="run" /> -->

    <UsingTask
        TaskName="GoBuild"
        TaskFactory="RoslynCodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <BuildFlags ParameterType="System.String" />
            <Destination ParameterType="System.String" />
            <GOOS ParameterType="System.String" />
            <GOWORK ParameterType="System.String" />
            <EnvironmentVariables ParameterType="System.String" />
            <Path ParameterType="System.String" />
            <WorkingDirectory ParameterType="System.String" />

            <StdOut ParameterType="System.String" Output="true" />
            <StdErr ParameterType="System.String" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
String args = "build -gcflags=\"all=-d=checkptr\"";
if (!string.IsNullOrEmpty(BuildFlags)) {
    args += " " + BuildFlags;
}
if (!string.IsNullOrEmpty(Destination)) {
    args += string.Format(" -o=\"{0}\"", Destination);
}
if (!string.IsNullOrEmpty(Path)) {
    args += " " + Path;
}

Log.LogMessage(MessageImportance.High, "go " + args );

System.Diagnostics.ProcessStartInfo procStartInfo = new System.Diagnostics.ProcessStartInfo("go.exe", args);

procStartInfo.UseShellExecute = false;
procStartInfo.CreateNoWindow = true;
procStartInfo.RedirectStandardOutput = true;
procStartInfo.RedirectStandardError = true;


if (!string.IsNullOrEmpty(WorkingDirectory)) {
    procStartInfo.WorkingDirectory = WorkingDirectory;
}


if (!string.IsNullOrEmpty(GOOS)) {
    procStartInfo.EnvironmentVariables.Remove("GOOS");
    procStartInfo.EnvironmentVariables.Add("GOOS", GOOS);
}

if (!string.IsNullOrEmpty(GOWORK)) {
    procStartInfo.EnvironmentVariables.Remove("GOWORK");
    procStartInfo.EnvironmentVariables.Add("GOWORK", GOWORK);
}

if (!string.IsNullOrEmpty(EnvironmentVariables)) {
    foreach (var env in EnvironmentVariables.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)) {
        var kv = env.Split(new[] { '=' }, 2);
        string k = kv[0];
        string v = "";
        if (kv.Length > 1) {
            v = kv[1];
        }
        procStartInfo.EnvironmentVariables.Remove(k);
        procStartInfo.EnvironmentVariables.Add(k, v);
    }
}

System.Diagnostics.Process proc = new System.Diagnostics.Process();
proc.StartInfo = procStartInfo;
proc.Start();
proc.WaitForExit();

string StdOut = proc.StandardOutput.ReadToEnd();
string StdErr = proc.StandardError.ReadToEnd();

Log.LogMessage(MessageImportance.Normal, StdOut);
Log.LogMessage(MessageImportance.Normal, StdErr);
]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask
        TaskName="GoB"
        TaskFactory="RoslynCodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <Task>

            <Code Type="Class" Language="cs">
                <![CDATA[
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Build.Utilities;
using Microsoft.Build.Framework;

public class GoB : ToolTask {
    protected override string ToolName {
        get { return "go.exe"; }
    }
    protected override MessageImportance StandardOutputLoggingImportance {
        get { return MessageImportance.High; }
    }

    protected override MessageImportance StandardErrorLoggingImportance {
        get { return MessageImportance.High; }
    }

    private string flags = "-gcflags=\"all=-d=checkptr\"";
    public string GOOS { get; set; }
    public string GOWORK { get; set; }


    override protected string GenerateCommandLineCommands() {
        return "env GOOS";
    }

    protected override string GenerateFullPathToTool(){
        return ToolName;
    }

    public override bool Execute() {
        List<string> envs;
        if (EnvironmentVariables == null) {
           envs = new List<string>();
        } else {
           envs = new List<string>(EnvironmentVariables.ToList());
        }
        if (!string.IsNullOrEmpty(GOOS)) {
            envs.Add("GOOS=" + GOOS);
        }
        if (!string.IsNullOrEmpty(GOWORK)) {
            envs.Add( "GOWORK=" + GOWORK);
        }
        base.EnvironmentVariables = envs.ToArray();
        return base.Execute();
    }
}
]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="test">
        <Exec Command="echo building shim " />
        <GoB GOOS="darwin" />
        <!-- <GoBuild
            Path="shim"
            Destination="a.exe"
            BuildFlags="-x -v"
            EnvironmentVariables="GOOS=linux;;MyFlag='-sdf=a d=sd af  sd';;;b=;;a;CGO=3"
        /> -->
    </Target>

    <Target Name="shim">
        <ItemGroup>
            <Binary Condition="'%(GoBinary.Name)' == 'shim'" Include="@(GoBinary)" />
        </ItemGroup>
        <Exec Command="echo building shim %(Binary.Identity)" />
        <!-- <GoBuild
            Path="shim"
            Destination="%(Binary.Identity)"
            BuildFlags="-x -v"
            GOOS="%(Binary.GOOS)"
            GOWORK="%(Binary.GOWORK)"
            /> -->
    </Target>

    <Target Name="uvmboot">

        <Exec Command="echo building boot" />
    </Target>

    <Target Name="GoBinaries" Outputs="%(GoBinary.Identity)" AfterTargets="shim;uvmboot">
        <Exec
            Command="echo ------- building %(GoBinary.Identity) %(GoBinary.GOOS) %(GoBinary.Src)"
            Condition="'%(GoBinary.Build)' == 'true'" />
    </Target>

    <Target Name="MakeDirs">
        <MakeDir Directories="$(CmdBin);$(TestBin);$(ToolBin);$(DepDir);$(OutDir);$(ProtobufDir)" />
    </Target>

    <Target Name="Clean">
        <RemoveDir Directories="$(BinDir);$(DepDir);$(DepDir);$(OutDir);$(ProtobufDir)" />
    </Target>

    <Target Name="ProtoFiles">
        <Message Text="%(ProtoFile.FullPath)" />
    </Target>

</Project>

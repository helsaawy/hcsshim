# This file is autogenerated; DO NOT EDIT.
#
# ninjabuild created for github.com/Microsoft/hcsshim
ninja_required_version = 1.10

PWSH = C:\Program Files\PowerShell\7\pwsh.exe

rule ninja
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    Set-Location '$DESTINATION' ; $$d = '$CMD_FLAGS' | ConvertFrom-Json $
    -AsHashtable ; & '$in' @d
  description = Rebuilding NinjaFile with flags: $CMD_FLAGS
  generator = 1
build ninja: ninja C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\scripts\New-NinjaBuild.ps1
  CMD_FLAGS = {"Verbose":true}
  DESTINATION = C:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim

#
# miscellaneous utilities
#

NINJA_MODULE = C:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\scripts\NinjaBuild

rule call-script
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command & $
    '$$in' $CMD_FLAGS
  description = script $in with flags: $CMD_FLAGS

rule unzip
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    Expand-Archive -Force -DestinationPath '$DESTINATION' $CMD_FLAGS '$in'
  description = unziping "$in" to "$DESTINATION" with flags: $CMD_FLAGS

rule tar
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command tar $
    -f '$in' $CMD_FLAGS > ('$out' ? '$out' $: $$null)
  description = tar "$in" (with stamp "$out") with flags: $CMD_FLAGS

rule tar-dd
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    Import-Module '$NINJA_MODULE' ; $
    $$fs = (tar -f '$in' -t $CMD_FLAGS | ForEach-Object { $
    Join-Path '$DESTINATION' ($$_ -split '[/\\]', ($STRIP_COMPONENTS + $
    1))[$STRIP_COMPONENTS] $
    }); $
    '$out' | New-DynDepFile -CreatedFor '$in' | $
    Add-Dyndep -Build '$STAMP' -ImplicitOutput $$fs -Restat -Quiet
  description = dyndep file "$out" for stamp "$STAMP" with files in "$in" and flags: $
    $CMD_FLAGS

rule web-download
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    Invoke-WebRequest -Method GET -OutFile '$out' -Uri '$URL'
  description = downloading "$out" from "$URL" with flags: $CMD_FLAGS

rule mv
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    Move-Item '$in' $CMD_FLAGS '$out'
  description = moving "$in" to "$out" with flags: $CMD_FLAGS
  generator = 1

rule mkdir
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command ( $
    Test-Path -PathType Container -Path '$out' ) -or ( New-Item '$out' $
    $CMD_FLAGS -ItemType Directory ) > $$null
  description = creating directory $out with flags: $CMD_FLAGS
  generator = 1

# Use $SOURCE rather than $in because the latter would force the directory to be
# created if it did not exist
rule rm
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    (Test-Path -Path '$SOURCE') -and $
    (Remove-Item '$SOURCE' -Recurse -Force $CMD_FLAGS ) > $$null
  description = removing item "$SOURCE" with flags: $CMD_FLAGS


build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd: mkdir
build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\tools: $
  mkdir
build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test: mkdir
build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\out: mkdir
build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\deps: mkdir
build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\protobuf: mkdir
build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\protobuf: $
  mkdir
#
# crictl
#

CRICTL = C:\ContainerPlat\crictl.exe

rule rmpods
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    & '$CRICTL' --image-endpoint 'tcp://127.0.0.1:2376' --runtime-endpoint 'tcp://127.0.0.1:2376' $
    $CRICTL_FLAGS pods --quiet | ForEach-Object { $
    & '$CRICTL' --image-endpoint 'tcp://127.0.0.1:2376' --runtime-endpoint 'tcp://127.0.0.1:2376' $
    stopp $CRICTL_FLAGS $$_ ; $
    & '$CRICTL' --image-endpoint 'tcp://127.0.0.1:2376' --runtime-endpoint 'tcp://127.0.0.1:2376' $
    rmp $CRICTL_FLAGS --force $$_ }
  description = removing CRI pods with flags: $CRICTL_FLAGS

build rmpods: rmpods

#
# go
#
# use fake targets for building and vendoring since `go` is (fairly) quick, has
# its own cache, and understands test dependencies, vendoring, etc.

GO = C:\Program Files\Go\bin\go.exe

# install module

rule go-install
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    $$env:GOOS='$GOOS' ; $
    & '$GO' install $GO_FLAGS '$URL@$VERSION'
  description = installing "$out" from "$URL@$VERSION" with flags: GOOS='$GOOS' $
    $GO_FLAGS
  generator = 1

# vendor module

rule go-vend
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    Set-Location '$in' ; $
    & '$GO' mod tidy -e $GO_FLAGS ; $
    & '$GO' mod vendor -e $GO_FLAGS
  description = tidying and vendoring $in

# go generate
# We dont really know what `go generate` will output (ie, if it will create a
# new file or update existing ones) so use fake targets to specify the
# directories

rule go-gen
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    $$env:GOOS='$GOOS' ; $
    & '$GO' generate $GO_FLAGS $in
  description = calling go generate on package ".\$in" with flags: GOOS='$GOOS' $
    $GO_FLAGS

# build go executable

rule go-build
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    $$env:GOOS='$GOOS' ; $
    & '$GO' build -ldflags='-s -w' $GO_FLAGS -o '$out' '$in'
  description = building "$out" from "$in" with flags: -gcflags='all=-d=checkptr' -tags functional $
    GOOS='$GOOS' $GO_FLAGS

# build go test executable

rule go-build-test
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    $$env:GOOS='$GOOS' ; $
    & '$GO' test -gcflags='all=-d=checkptr' -tags functional $GO_FLAGS -o '$out' $
    -c '$in'
  description = building test "$out" from "$in" with flags: -gcflags='all=-d=checkptr' -tags functional $
    GOOS='$GOOS' $GO_FLAGS

build vend: go-vend .

default vend

build C$:\Users\hamzaelsaawy\go\bin\benchseries.exe: go-install
  VERSION = latest
  URL = golang.org/x/perf/cmd/benchseries
build C$:\Users\hamzaelsaawy\go\bin\benchstat.exe: go-install
  VERSION = latest
  URL = golang.org/x/perf/cmd/benchstat
build go-deps: phony C$:\Users\hamzaelsaawy\go\bin\benchseries.exe $
  C$:\Users\hamzaelsaawy\go\bin\benchstat.exe

# go executable build declarations

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\containerd-shim-runhcs-v1.exe $
  | shim: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\containerd-shim-runhcs-v1 $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim
  GOOS = windows
build C$:\ContainerPlat\containerd-shim-runhcs-v1.exe: mv C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\containerd-shim-runhcs-v1.exe $
  | rmpods
  CMD_FLAGS = -Force
build mv-shim: phony C$:\ContainerPlat\containerd-shim-runhcs-v1.exe

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd\runhcs.exe $
  | runhcs: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\runhcs $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd\ncproxy.exe $
  | ncproxy: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\ncproxy $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd\wclayer.exe $
  | wclayer: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\wclayer $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd\tar2ext4.exe $
  | tar2ext4: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\tar2ext4 $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd\shimdiag.exe $
  | shimdiag: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\shimdiag $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\tools\uvmboot.exe $
  | uvmboot: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\tools\uvmboot $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\tools
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\tools\zapdir.exe $
  | zapdir: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\tools\zapdir $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\tools
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd\gcs | $
  gcs: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\gcs $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd
  GOOS = linux

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd\gcstools $
  | gcstools: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\gcstools $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd
  GOOS = linux

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd\wait-paths $
  | wait-paths: go-build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\hooks\wait-paths $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\cmd
  GOOS = linux

build tools: phony uvmboot zapdir tar2ext4 shimdiag

# go test-executable build declarations

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test\containerd-shim-runhcs-v1.test.exe $
  | shimtest: go-build-test C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\test\containerd-shim-runhcs-v1 $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test\cri-containerd.test.exe $
  | critest: go-build-test C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\test\cri-containerd $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test\functional.test.exe $
  | functional: go-build-test C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\test\functional $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test\runhcs.test.exe $
  | runhcstest: go-build-test C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\test\runhcs $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test
  GOOS = windows

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test\gcstest $
  | gcstest: go-build-test C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\test\gcs $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\test
  GOOS = linux

build tests: phony shimtest critest functional runhcstest

build C$:\Users\hamzaelsaawy\go\bin\goversioninfo.exe: go-install
  VERSION = latest
  URL = github.com/josephspurrier/goversioninfo/cmd/goversioninfo
build go-gen-deps: phony C$:\Users\hamzaelsaawy\go\bin\goversioninfo.exe

build gogen-cmd-containerd-shim-runhcs-v1: go-gen C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\containerd-shim-runhcs-v1 $
  || go-gen-deps
build gogen-cmd-runhcs: go-gen C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\runhcs $
  || go-gen-deps
build gogen-cmd-wclayer: go-gen C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\wclayer $
  || go-gen-deps
build gogen-internal-hns: go-gen C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\hns $
  || go-gen-deps
build gogen-internal-interop: go-gen C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\interop $
  || go-gen-deps
build gogen-internal-regstate: go-gen C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\regstate $
  || go-gen-deps
build gogen-internal-vmcompute: go-gen C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\vmcompute $
  || go-gen-deps
build gogen-internal-wclayer: go-gen C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\wclayer $
  || go-gen-deps
build gogen-internal-winapi: go-gen C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\winapi $
  || go-gen-deps

build go-gen: phony gogen-cmd-containerd-shim-runhcs-v1 gogen-cmd-runhcs $
  gogen-cmd-wclayer gogen-internal-hns gogen-internal-interop $
  gogen-internal-regstate gogen-internal-vmcompute gogen-internal-wclayer $
  gogen-internal-winapi

#
# protobuild
#

PROTOBUILD = C:\Users\hamzaelsaawy\go\bin\protobuild.exe

# download and unzip protoc.zip
build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\out\protoc.zip: $
  web-download || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\out
  URL = https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-win32.zip

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\deps\protoc.include.dd: $
  tar-dd C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\out\protoc.zip $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\protobuf $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\deps
  DESTINATION = C:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\protobuf
  CMD_FLAGS = *.proto
  STAMP = C:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\deps\protoc.include.stamp
  STRIP_COMPONENTS = 1

# extract include files
build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\deps\protoc.include.stamp: $
  tar C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\out\protoc.zip $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\protobuf $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\deps $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\deps\protoc.include.dd
  dyndep = C:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\deps\protoc.include.dd
  CMD_FLAGS = -xm -C C:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\protobuf --strip-components 1 include

# install protoc.exe

build | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\protobuf\protoc.exe: $
  tar C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\out\protoc.zip $
  || C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\protobuf
  CMD_FLAGS = -xm -C 'C:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\protobuf' --strip-components 1 bin

build proto-deps: phony C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\deps\protoc.include.stamp $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\protobuf\protoc.exe

rule protobuild
  command = "$PWSH" -NoProfile -NoLogo -NonInteractive $PWSH_FLAGS -Command $
    $$env:Path += ';C:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\bin\protobuf' $
    ; & '$PROTOBUILD' $PROTOBUILD_FLAGS '$MODULE'
  description = building proto files "$MODULE" with flags: "$PROTOBUILD_FLAGS"
  generator = 1

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\containerd-shim-runhcs-v1\options\runhcs.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\containerd-shim-runhcs-v1\options\runhcs.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/cmd/containerd-shim-runhcs-v1/options

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\containerd-shim-runhcs-v1\stats\stats.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\containerd-shim-runhcs-v1\stats\stats.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/cmd/containerd-shim-runhcs-v1/stats

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\computeagent\computeagent.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\computeagent\computeagent.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/internal/computeagent

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\extendedtask\extendedtask.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\extendedtask\extendedtask.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/internal/extendedtask

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\ncproxyttrpc\networkconfigproxy.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\ncproxyttrpc\networkconfigproxy.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/internal/ncproxyttrpc

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\shimdiag\shimdiag.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\shimdiag\shimdiag.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/internal/shimdiag

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\vmservice\vmservice.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\vmservice\vmservice.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/internal/vmservice

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\pkg\ncproxy\ncproxygrpc\v1\networkconfigproxy.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\pkg\ncproxy\ncproxygrpc\v1\networkconfigproxy.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/pkg/ncproxy/ncproxygrpc/v1

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\pkg\ncproxy\nodenetsvc\v1\nodenetsvc.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\pkg\ncproxy\nodenetsvc\v1\nodenetsvc.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/pkg/ncproxy/nodenetsvc/v1

build C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\pkg\annotations\payloads.pb.go: $
  protobuild | C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\pkg\annotations\payloads.proto $
  || proto-deps
  MODULE = github.com/Microsoft/hcsshim/pkg/annotations

build proto: phony C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\containerd-shim-runhcs-v1\options\runhcs.pb.go $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\cmd\containerd-shim-runhcs-v1\stats\stats.pb.go $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\computeagent\computeagent.pb.go $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\extendedtask\extendedtask.pb.go $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\ncproxyttrpc\networkconfigproxy.pb.go $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\shimdiag\shimdiag.pb.go $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\internal\vmservice\vmservice.pb.go $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\pkg\ncproxy\ncproxygrpc\v1\networkconfigproxy.pb.go $
  C$:\Users\hamzaelsaawy\go\src\github.com\microsoft\hcsshim\pkg\ncproxy\nodenetsvc\v1\nodenetsvc.pb.go

build deps: phony go-deps go-gen-deps proto-deps
